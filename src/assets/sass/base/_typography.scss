///
/// Hyperbolic by Pixelarity
/// pixelarity.com | hello@pixelarity.com
/// License: pixelarity.com/license
///

/* Typography */

	html {
		font-size: 14pt;

		@include breakpoint('<=xlarge') {
			font-size: 12pt;
		}

		@include breakpoint('<=small') {
			font-size: 11pt;
		}

		@include breakpoint('<=xxsmall') {
			font-size: 10pt;
		}
	}

	body {
		background-color: _palette(bg-alt);
		color: _palette(fg);
	}

	body, input, select, textarea {
		font-family: _font(family);
		font-weight: _font(weight);
		font-size: 1rem;
		line-height: 2;
	}

	a {
		@include vendor('transition', (
			'color #{_duration(transition)} ease-in-out',
			'border-bottom-color #{_duration(transition)} ease-in-out'
		));
		border-bottom: dotted 1px;
		text-decoration: none;

		&:hover {
			border-bottom-color: transparent;
		}
	}

	strong, b {
		font-weight: _font(weight-bold);
	}

	em, i {
		font-style: italic;
	}

	p {
		margin: 0 0 _size(element-margin) 0;
	}

	h1, h2, h3, h4, h5, h6 {
		font-weight: _font(weight);
		line-height: 1.5;
		margin: 0 0 (_size(element-margin) * 0.75) 0;
		text-transform: uppercase;

		a {
			color: inherit;
			text-decoration: none;
		}
	}

	h1 {
		font-size: 3.25rem;
	}

	h2 {
		font-size: 2.5rem;
	}

	h3 {
		font-size: 1.75rem;
	}

	h4 {
		font-size: 1.25rem;
	}

	h5 {
		font-size: 0.9rem;
	}

	h6 {
		font-size: 0.7rem;
	}

	@include breakpoint('<=large') {
		h1 {
			font-size: 2.75rem;
		}

		h2 {
			font-size: 2rem;
		}

		h3 {
			font-size: 1.5rem;
		}
	}

	@include breakpoint('<=small') {
		h1 {
			font-size: 2.25rem;
		}

		h2 {
			font-size: 1.5rem;
		}

		h3 {
			font-size: 1.25rem;
		}
	}

	sub {
		font-size: 0.8rem;
		position: relative;
		top: 0.5rem;
	}

	sup {
		font-size: 0.8rem;
		position: relative;
		top: -0.5rem;
	}

	blockquote {
		border-left: solid 0.5rem;
		font-style: italic;
		margin: 0 0 _size(element-margin) 0;
		padding: (_size(element-margin) * 0.5) 0 (_size(element-margin) * 0.5) _size(element-margin);
	}

	code {
		border-radius: _size(border-radius);
		border: solid 1px;
		font-family: _font(family-fixed);
		font-size: 0.9rem;
		margin: 0 0.25rem;
		padding: 0.25rem 0.65rem;
	}

	pre {
		-webkit-overflow-scrolling: touch;
		font-family: _font(family-fixed);
		font-size: 0.9rem;
		margin: 0 0 _size(element-margin) 0;

		code {
			display: block;
			line-height: 1.75;
			padding: 1rem 1.5rem;
			overflow-x: auto;
		}
	}

	hr {
		border: 0;
		border-bottom: solid 1px;
		margin: _size(element-margin) 0;

		&.major {
			margin: (_size(element-margin) * 2) 0;
		}

		@include breakpoint('<=small') {
			&.major {
				margin: (_size(element-margin) * 1.5) 0;
			}
		}
	}

	header {
		&.major {
			h1, h2, h3, h4, h5, h6 {
				margin: 0 0 0.875em 0;
				padding-bottom: 0.875em;

				&:after {
					position: relative;
					top: 0.75em;
					content: '';
					height: 2px;
					display: block;
					width: 5rem;
				}
			}

			p {
				font-size: 1.25rem;
				margin: 0 0 6rem 0;
			}

			&.alt {
				margin-bottom: -3rem;
			}
		}

		&.special {
			text-align: center;

			&.major {
				h1, h2, h3, h4, h5, h6 {
					&:after {
						margin: 0 auto;
					}
				}
			}
		}

		@include breakpoint('<=large') {
			&.major {
				p {
					margin: 0 0 4rem 0;
				}

				&.alt {
					margin-bottom: -1rem;
				}
			}
		}

		@include breakpoint('<=small') {
			&.major {
				p {
					font-size: 1rem;
					margin: 0 0 3rem 0;
				}

				&.alt {
					margin-bottom: -1rem;
				}
			}
		}

		@include breakpoint('<=xsmall') {
			&.major {
				p {
					br {
						display: none;
					}
				}
			}
		}
	}

	@mixin color-typography($p: null) {
		@if $p != null {
			background-color: _palette($p, bg);
			color: _palette($p, fg);
		}

		input, select, textarea {
			color: _palette($p, fg-bold);
		}

		a {
			@if $p == 'invert' {
				color: _palette($p, fg-bold);
			}
			@else {
				color: _palette(accent1);
			}
		}

		strong, b {
			color: _palette($p, fg-bold);
		}

		h1, h2, h3, h4, h5, h6 {
			color: _palette($p, fg-bold);
		}

		blockquote {
			border-left-color: _palette($p, border);
		}

		code {
			background: _palette($p, border-bg);
			border-color: _palette($p, border);
		}

		hr {
			border-bottom-color: _palette($p, border);
		}

		header {
			&.major {
				h1, h2, h3, h4, h5, h6 {
					&:after {
						@if $p == 'invert' {
							background: _palette($p, border);
						}
						@else {
							@include gradient-background(90%, 90deg);
						}
					}
				}
			}
		}
	}

	@include color-typography;